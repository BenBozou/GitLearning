<!--callundefinedFunction(
/**
*   this psge will be invoked from Account console layout. Also this page used a layout 'cellcom-sidebar' from Vlocity
*   autor  Dmitry Rivlin
*   taskId PLR-304
*   @submodule ConsoleSidebar.page
*/
-->
<apex:page controller="vlocity_cmt.CardCanvasController" cache="true" docType="html-5.0" applyHtmlTag="true" showHeader="false" sidebar="false" standardStylesheets="false" action="{!PreLoad}" extensions="LinkEnvSupport">
    <html dir="{!IF(isLanguageRTL, 'rtl', 'ltr')}" lang="{!currentLang}">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <meta http-equiv="x-ua-compatible" content="IE=edge" />

    <style type="text/css">
        body {
            margin: 0px !important;
            padding: 0px !important;
            background: #FFF;
        }
        .spinnerMin {
                height: 100px;
            }
    </style>

    <apex:stylesheet value="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/css/vlocity.css')}" />
    <apex:includeScript value="{!URLFOR($Resource.console_Resources, '/JS/cardLink.js')}" />

    <apex:includeScript value="/support/console/38.0/integration.js" />

    <c:CellcomIconComponent />
    <apex:stylesheet value="{!IF(isLanguageRTL, URLFOR($Resource.vlocity_cmt__slds, '/assets/styles/salesforce-lightning-design-system-vf.rtl.min.css'), URLFOR($Resource.vlocity_cmt__slds, '/assets/styles/salesforce-lightning-design-system-vf.min.css'))}"/>

    <!--<apex:includeLightning />-->

    </head>
    <body>
    
    <div class="vlocity via-slds" ng-app="sidebarApp" ng-controller="accountCtrl" id="startLayout">
        <!-- Sidebar layout-->
        <vloc-layout spinner="true" ng-if="{!!popDataSharing} && loadLayout" ctrl="{{injectedController}}" layout-id="{{layoutId}}" layout-name="{!acc.SidebarLayout__c}"></vloc-layout>
    </div>

    <script src="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/javascripts/vlocity.js')}"></script>
    <script src="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/bower_components/forceng/forceng.js')}"></script>
    <script src="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/bower_components/ForceTK/forcetk.js')}"></script>
    <script src="{!$Resource.vlocity_cmt__CardFramework}"></script>
    <script src="{!$Resource.vlocity_cmt__SldsAngular}"></script>
    <script src="{!URLFOR($Resource.console_Resources, '/JS/cl-directives.js')}"></script>
    
    <!-- Fix Phone formatting -->
    <!--<script src="{!URLFOR($Resource.vlocity_assets, '/javascripts/ngMask.js')}"></script>-->

    <script type="text/javascript">
        window.currEnvironmentAllLinks = {!urlLinkList};
        window.primaryContactId = '{!JSENCODE(primaryContactId)}';

        //var sideBarModule = angular.module('sidebarApp',['CardFramework', 'vlocity']);
        var layoutName ='{!JSENCODE(layoutName)}'; //'console-sidebar-consumer';
        var sideBarModule = angular.module('sidebarApp', ['vlocity', 'CardFramework', 'forceng', 'cfp.hotkeys','cl-directives']);
        // 'ngMask',

        sideBarModule.config(['$localizableProvider', function($localizableProvider) {
            'use strict';
            $localizableProvider.setLocalizedMap(window.i18n);
            $localizableProvider.setDebugMode(window.ns === '');
        }]);
        
        
        sideBarModule.run(['interactionTracking', function($scope,$rootScope, $http, interactionTracking) {
                  //override of trackVlocityInteraction - Performance issues Fix 
                    //setContactId("flag");
                    //$rootScope.contactId = $rootScope.primaryTabUrl.contactId;
                    $scope.loadLayout = false;
        }]);
         
        // this is used for remoteActions config inside CardFramework
        // this is duplicated in both ConsoleSidebar.page and CardLayoutComponent.component to facilitate
        // independent testing of the left handside vs right handside of the console
        var nsPrefixDotNotation = "{!nsPrefixDotNotation}";
        //console.log('nsPrefixDotNotation fetched from CardCanvasController: ' + nsPrefixDotNotation);
        localStorage.setItem('nsPrefixDotNotation', nsPrefixDotNotation);
        //console.log('nsPrefixDotNotation value stored in localStorage: ' + localStorage.getItem('nsPrefixDotNotation'));

        sideBarModule.controller('accountCtrl', ['$scope', '$rootScope', 'timeStampInSeconds', 'actionService', 'pageService', '$localizable', '$compile', '$window','$sce', function($scope, $rootScope, timeStampInSeconds, dataService, pageService, $localizable, $compile, $window,$sce) {
            //Used to load layout based on url params
            //TBD: remove !layout
            $scope.popDataSharing = {!popDataSharing};
            $scope.layoutId = pageService.params.layoutId;
            $scope.customerInteractionId = '{!JSENCODE(customerInteractionId)}';
            $rootScope.userId = "{!$User.Id}";
            $rootScope.userProfileId = "{!$User.profileId}";
            $rootScope.isAdminUser = ("{!isAdminUser}" == "true");
            $rootScope.isCommunityUser = ("{!InCommunity}" == "true");
            $scope.loadLayout = false;

            sforce.console.getEnclosingPrimaryTabId(function(result){
                $scope.primaryTabId = result.id;

                sforce.console.getPageInfo(result.Id,function(res2){
                //sforce.console.getTabLink(sforce.console.TabLink.TAB_ONLY, result.Id, function(res2){
                    //console.log('getPageInfo',res2);
                    var detUrl = JSON.parse(res2.pageInfo).url
                    //var uri_dec = urlToJSON(decodeURIComponent(res2.tabLink));
                    var uri_dec = urlToJSON(detUrl);
                    //console.log('uri_dec', uri_dec);
                    $rootScope.primaryTabUrl = uri_dec;
                    $rootScope.AccountSideUrl = urlToJSON(decodeURIComponent(location.href));

                    //console.log('ContactId from Apex controler before',$window.primaryContactId, $rootScope.AccountSideUrl);
                    setContactId(('accContactId' in $rootScope.AccountSideUrl));

                    /*$rootScope.contactId = $window.primaryContactId;
                    if (typeof $rootScope.primaryTabUrl.contactId !== "undefined") {
                        $rootScope.contactId = $rootScope.primaryTabUrl.contactId;
                    }*/
                    //console.log('ContactId from Apex controler',$rootScope.contactId);
                    $scope.loadLayout = true;
                    $scope.$digest();
                    //need open 360 immediatly
                    if (!$scope.popDataSharing){
                        sforce.console.getFocusedSubtabObjectId(function(subtabRes){
                            var openwithFocus = true;
                            console.log('ELIE 1', openwithFocus);
                            if(subtabRes.id.indexOf('001') !== 0 || $rootScope.primaryTabUrl.recommendation === "true"){
                                openwithFocus = false;
                            }
                            console.log('ELIE 2', openwithFocus);
                            var url = "/apex/ConsoleCards_Preview?useCache=true&Id={!acc.Id}&layout={!acc.CardLayout__c}&layoutSidebar={!acc.SidebarLayout__c}&contactId=" + $rootScope.contactId;
                            sforce.console.openSubtab($scope.primaryTabId, url, openwithFocus, 'מסך 360', null, null, 'open360');
                        });
                       
                    }
                });
            });


            var setContactId = function(flag) {
                $rootScope.contactId = $window.primaryContactId;
                if (flag) return;
                //console.log('Primary tab url', $rootScope.primaryTabUrl);
                if (typeof $rootScope.primaryTabUrl.contactId !== "undefined") {
                    $rootScope.contactId = $rootScope.primaryTabUrl.contactId;
                }
            }

            $scope.init = function() {
                function load(result) {

                    // in the case user creates a new account, there is no account id,
                    // so the rest should not be loaded.
                    // console sets result.id to a string with "null" value when creating new Acount
                    if (result.id === 'null') {
                        $rootScope.entitySelected = false;
                        return;
                    }
                    // As part of CARD-185, we are using params.id in cards which contains account id.
                    $rootScope.accountId = $scope.accountId = result.id;
                    $rootScope.entitySelected = true;
                    //we no longer pass the objType as we differ it inside of apex to make Console Cards actions agnostic
                    var obj = {};
                    obj.Id = result.id;
                    dataService.getActions('Account', obj, 'Web Client', 'ConsoleCards', $rootScope.forcetkClient, $scope.$log).then(
                        function(action) {
                            //All Action with type = "Console Cards"
                            $scope.consoleCardsAction = action;

                            if ($scope.consoleCardsAction.length === 0) {
                                //console.error('Either Vlocity Action has not been setup or it is not activated, so cards cannot be presented');
                                alert($localizable('ConsoleCardsActionConfigureError', 'Either Vlocity Action has not been setup or it is not activated, so cards cannot be presented.  There must be a Vlocity Action configured with the name ConsoleCards and it must have been activated'));
                                return;
                            }
                            //console.log('action completed:', $scope.consoleCardsAction);
                            sforce.console.getEnclosingPrimaryTabId(openSubtab);
                        });
                }
                if (sforce.console.isInConsole()) {
                    //console.info('inside console');
                    load({id:"{!acc.Id}"});

                } else {
                    //console.info('outside console');
                    var result = { id:'0011500001ChJqc' };
                                load(result);

                }
            };

            $scope.init();

            var openSubtab = function openSubtab(result) {
                //console.log('openSubTab');
                $scope.primaryTabId = result.id;
                sforce.console.getSubtabIds($scope.primaryTabId, showTabId);
            };

            var showTabId = function showTabId(result) {
                //console.log('Use VLOCITY Action', result);
                //Display the subtab IDs
                var subtabId = localStorage.getItem('subtabId');
                if ((result.ids).indexOf(subtabId) > -1) {
                    //console.error('found the tab ');
                } else {
                    // console.error('didnt find it, open it');
                    sforce.console.getTabLink(sforce.console.TabLink.TAB_ONLY, result.Id, showURL);
                }
            };

            var showURL = function showURL(result) {
                // Removed since $rootScope.primaryTabUrl was overriden and parameters lost.
                //var uri_dec = urlToJSON(decodeURIComponent(result.tabLink));
                //$rootScope.primaryTabUrl = uri_dec;

                var actionParams = urlToJSON(decodeURIComponent($scope.consoleCardsAction[0].url));
                //setContactId();

                $scope.layoutName = actionParams.layoutSidebar;
                var subTabName = $scope.consoleCardsAction['name'];
                sforce.console.focusSubtabByNameAndPrimaryTabId(subTabName, $scope.primaryTabId, focusSuccess);
            }

            var focusSuccess = function focusSuccess(result) {
                //console.log('openSuccess:', result);
                // detect if the consoleCardActions layout name has changed such that a new
                // layout will be used in the ConsoleCards (if not user has to close the account
                // and select the same account again in order for ConsoleCards to reflect change
                // of layout name being used)
                if (!result.success || originalLayoutName !== consoleCardsActionLayoutName) {
                    // AccountConsoleCards subtab is NOT open. We need to open a new one and focus it OR layoutName changed
                    angular.forEach($scope.consoleCardsAction, function(action) {

                        var primaryContactId = $window.primaryContactId;
                        $rootScope.action = action;
                        $rootScope.primaryTabId = $scope.primaryTabId;
                        var originalLayoutName = localStorage.getItem('consoleCardsLayoutName');
                        var url = action.url.replace(/(contactId=).*$/i, "$1" + $rootScope.contactId);
                        var contactId = url.substring(url.indexOf('&contactId')).split('=');
                        if ($rootScope.contactId < 15 ) return; // && action['name'] == 'ConsoleCards'

                        if (typeof($rootScope.primaryTabUrl.productId) == 'undefined' && action['name'] == 'ConsoleCardsProduct') return;
                        var tabLabel = action['displayName'];
                        var subTabName = action['name'];

                        if (!$scope.popDataSharing){
                            // Asset 2nd Level opening
                            if (action['name'] === 'ConsoleCardsProduct') {
                                if (typeof($rootScope.primaryTabUrl.productId) !== 'undefined' &&  $rootScope.primaryTabUrl.productId != null && $rootScope.primaryTabUrl.productId != '') {
                                    url = url.replace(/(productId=)/i, "$1" + $rootScope.primaryTabUrl.productId);
                                    url = url.replace(/(layout=)/i, "$1" + $rootScope.primaryTabUrl.layout);
                                    url = url.replace(/(banId=)/i, "$1" + $rootScope.primaryTabUrl.banId);
                                    url = url.replace(/(subscriber=)/i, "$1" + $rootScope.primaryTabUrl.subscriber);
                                    sforce.console.openSubtab($scope.primaryTabId, url, false, $rootScope.primaryTabUrl.subscriber, null, openSuccess, $rootScope.primaryTabUrl.subscriber);
                                }
                                if (typeof($rootScope.primaryTabUrl.ItemName) !== 'undefined' && $rootScope.primaryTabUrl.ItemName != null && $rootScope.primaryTabUrl.ItemName != '') {
                                    url = url.replace(/(ItemName=)/i, "$1" + $rootScope.primaryTabUrl.ItemName);
                                    url = url.replace(/(LineCode=)/i, "$1" + $rootScope.primaryTabUrl.LineCode);
                                    url = url.replace(/(layout=)/i, "$1" + $rootScope.primaryTabUrl.layout);
                                    sforce.console.openSubtab($scope.primaryTabId, url, false, $rootScope.primaryTabUrl.LineCode, null, openSuccess, $rootScope.primaryTabUrl.LineCode);
                                }
                            }
                            // Open 360
                            if (action['name'] === 'ConsoleCards') {
                                //sforce.console.openSubtab($scope.primaryTabId, url, true, tabLabel, null, openSuccess, subTabName);
                            }
                            if (action['name'] === 'ConsoleCardsWrapUp') {
                                enableSubtabClose(function(){
                                    url = url.replace(/(accountId=)/i, "$1" + $rootScope.accountId);
                                    sforce.console.openSubtab($scope.primaryTabId, url, false, tabLabel, null, openSuccessInteractionEvent, "wrap-up" );//interactionId
                                });
                            }
                        }else{
                            if (action['name'] === 'DataSharing') {
                                sforce.console.openSubtab($scope.primaryTabId, url, true, tabLabel, null, openSuccess, subTabName);

                            }
                        }
                    });
                }
            };
                
            function disableTabCallback(j, result,callbackFunc){
                sforce.console.disableTabClose(false, result.ids[j], function(res){
                    if(j === result.ids.length - 1){
                        callbackFunc();
                    }
                });
            }
            
            function enableSubtabClose(callbackFunc){
                sforce.console.getSubtabIds($scope.primaryTabId, function(result){
                    for(var i=0; i<result.ids.length; i++){
                        disableTabCallback(i,result,callbackFunc);
                    }
                });
            }


            function urlToJSON(url) {
                var query = url.replace(/^(.*)\?(.*)$/, "$2");
                var result = {};
                query.split("&").forEach(function(part) {
                    var item = part.split("=");
                    result[item[0]] = decodeURIComponent(item[1]);
                });
                return result;
            }


            var openSuccess = function openSuccess(result) {
                //console.log('opening subtab');
                if (result.success) {
                    var subtabId = localStorage.getItem('subtabId');
                    if (subtabId != result.Id) {
                        localStorage.setItem('subtabId', result.id);
                        sforce.console.focusSubtabById(result.id);
                    }
                }
            };

            var openSuccessInteractionEvent = function openSuccessInteractionEvent(result) {
                //console.log('opening subtab interaction', result);
                if (result.success) {
                        //console.log('Disable tab', result);
                        if(typeof $rootScope.primaryTabUrl.recommendation === "undefined" || $rootScope.primaryTabUrl.recommendation !== "true"){//recommendation
                            sforce.console.disableTabClose(true, result.id, disableTabResults);
                        }

                    var subtabId = localStorage.getItem('subtabId');
                    if (subtabId != result.Id) {
                        localStorage.setItem('subtabId', result.id);
                        sforce.console.focusSubtabById(result.id);
                    }
                }
            };

            var disableTabResults = function disableTabResults(result){
                //console.log('opening subtab disable', result);
            }


            // this will prevent the sidebar in loading itself twice, reducing api calls by 50%
            var eventHandler = function eventHandler(result) {
                // just do nothing so I do not refresh :)
            };
            sforce.console.onEnclosingTabRefresh(eventHandler);
        }]);
        sforce.console.addEventListener('changeContact', function(result){
            result.message = JSON.parse(result.message);
            var curId = "{!$CurrentPage.parameters.Id}";

            if (result.message.accountId != curId) return;

            var href = location.href.replace(/&accContactId.*$/,'') + '&accContactId=' + result.message.accContactId;
            location.href = href;
        });
        
        sideBarModule.factory('interactionTracking', function() {
            return {
                getDefaultTrackingData : function() {
                    return {};
                },
                addInteraction: function(interaction) {
                    return null;
                },
                enqueueInteractions : function(interactions) {
                    return null;
                }
            };
        });
        
    </script>
    </body>
    </html>
</apex:page>