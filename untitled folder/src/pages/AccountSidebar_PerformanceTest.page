<!--
/**
*   this psge will be invoked from Account console layout. Also this page used a layout 'cellcom-sidebar' from Vlocity
*   autor  Dmitry Rivlin
*   taskId PLR-304
*   @submodule ConsoleSidebar.page
*/
-->

<apex:page controller="vlocity_cmt.CardCanvasController" docType="html-5.0" applyHtmlTag="true" showHeader="false" sidebar="false" standardStylesheets="false" extensions="RTL_Support,LinkEnvSupport">
<!--<c:MonthlyInvoiceComponent />-->
<html dir="{!IF(isLanguageRTL, 'rtl', 'ltr')}" lang="{!currentLang}">
<style type="text/css">
        body {
                margin: 0px !important;
                padding: 0px !important;
                background: #FFF;
        }
</style>


<apex:stylesheet value="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/css/vlocity.css')}"/>
<apex:includeScript value="{!URLFOR($Resource.console_Resources, '/JS/cardLink.js')}"/>
  
  <!-- <apex:includeScript value="/support/console/34.0/integration.js"/>  -->
   <apex:includeScript value="{!URLFOR($Resource.IntegrationMin, '/integration.min.js')}"/>

<apex:includeLightning />
<c:CellcomIconComponent />
<apex:stylesheet value="{!IF(isLanguageRTL, URLFOR($Resource.vlocity_rtl, '/assets/styles/salesforce-lightning-design-system-vf.rtl.min.css'), URLFOR($Resource.vlocity_rtl, '/assets/styles/salesforce-lightning-design-system-vf.min.css'))}"/>

<div class="vlocity via-slds" ng-app="sidebarApp" ng-controller="accountCtrl" id="startLayout">
        <!-- Sidebar layout-->
</div>

<script src="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/javascripts/vlocity.js')}"></script>
<script src="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/bower_components/forceng/forceng.js')}"></script>
<script src="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/bower_components/ForceTK/forcetk.js')}"></script>
<script src="{!$Resource.vlocity_cmt__CardFramework}"></script>
<script src="{!$Resource.vlocity_cmt__SldsAngular}"></script>


<script type="text/javascript">
         window.currEnvironmentAllLinks={!urlLinkList};
        //var sideBarModule = angular.module('sidebarApp',['CardFramework', 'vlocity']);
        var layoutName = 'Account-console-sidebar';
        var sideBarModule = angular.module('sidebarApp',['CardFramework', 'vlocity', 'forceng', 'cfp.hotkeys']);

        sideBarModule.config(['$localizableProvider', function($localizableProvider) {
            'use strict';
            $localizableProvider.setLocalizedMap(window.i18n);
            $localizableProvider.setDebugMode(window.ns === '');
        }]);

        // this is used for remoteActions config inside CardFramework
        // this is duplicated in both ConsoleSidebar.page and CardLayoutComponent.component to facilitate
        // independent testing of the left handside vs right handside of the console
        var nsPrefixDotNotation = "{!nsPrefixDotNotation}";
        console.log('nsPrefixDotNotation fetched from CardCanvasController: ' + nsPrefixDotNotation);
        localStorage.setItem('nsPrefixDotNotation', nsPrefixDotNotation);
        console.log('nsPrefixDotNotation value stored in localStorage: ' + localStorage.getItem('nsPrefixDotNotation'));

        sideBarModule.filter('phoneNumber', function() {
                return function(phoneNumber) {
                    phoneNumber = phoneNumber || '';
                    //Removes all special charaters in phonenumber except numbers and +
                    phoneNumber = phoneNumber.replace(/[^\d\+]/g,"");
                    return phoneNumber;
                };
        });

        sideBarModule.run(["$sce","$rootScope","force","timeStampInSeconds", function($sce, $rootScope, force, timeStampInSeconds){
                console.log('inside run');

                force.init({
                        accessToken: '{!$Api.Session_ID}',
                        useProxy: false
                });

                $rootScope.forcetkClient = new forcetk.Client();
                $rootScope.forcetkClient.setSessionToken('{!$Api.Session_ID}');
        }]);

        sideBarModule.controller('accountCtrl', ['$scope', '$rootScope', 'timeStampInSeconds','dataService', 'pageService', '$localizable', '$compile', function($scope, $rootScope, timeStampInSeconds, dataService, pageService, $localizable, $compile) {
                //Used to load layout based on url params
                //TBD: remove !layout
                $scope.layoutName = pageService.params.layout ? pageService.params.layout : layoutName;
                $scope.layoutId = pageService.params.layoutId;

                $scope.init = function () {

                        function load(result) {

                                // in the case user creates a new account, there is no account id,
                                // so the rest should not be loaded.
                                // console sets result.id to a string with "null" value when creating new Acount
                                if (result.id === 'null') {
                                        $rootScope.entitySelected = false;
                                        return;
                                }

                                // As part of CARD-185, we are using params.id in cards which contains account id.
                                $rootScope.accountId = $scope.accountId = result.id;
                                $rootScope.entitySelected = true;
                                //we no longer pass the objType as we differ it inside of apex to make Console Cards actions agnostic
                                dataService.getConsoleCardsAction(null, result.id, $rootScope.forcetkClient).then(
                                        function(action){
                                                $scope.consoleCardsAction = action;
                                                if($scope.consoleCardsAction.length === 0){
                                                        console.error('Either Vlocity Action has not been setup or it is not activated, so cards cannot be presented');
                                                        // the reason we are launching the error message below using alert() rather than $modal is
                                                        // because it is launched from the sidebar and $modal is constrained by the size of the
                                                        // sidebar, which may not have enough space to display the entire message.  By using alert(),
                                                        // the error prompt will be in the middle of the screen and would be big enough to diaply the
                                                        // entire message
                                                        alert($localizable('ConsoleCardsActionConfigureError', 'Either Vlocity Action has not been setup or it is not activated, so cards cannot be presented.  There must be a Vlocity Action configured with the name ConsoleCards and it must have been activated'));
                                                        return;
                                                }
                                                console.log('action completed:',$scope.consoleCardsAction);
                                                sforce.console.getEnclosingPrimaryTabId(openSubtab);
                                });

                        }

                        if(sforce.console.isInConsole()) {
                                console.info('inside console');
                                sforce.console.getEnclosingPrimaryTabObjectId(load);
                        } else {
                                console.info('outside console');
                                var result = { id:'0011500001ChJqc' };
                                load(result);
                        }
                };

                $scope.init();

                var openSubtab = function openSubtab(result) {

                        $scope.primaryTabId = result.id;
                        //var subTabName = $scope.consoleCardsAction['name'];
                        sforce.console.getSubtabIds($scope.primaryTabId , showTabId);
                        
                        //sforce.console.focusSubtabByNameAndPrimaryTabId(subTabName, $scope.primaryTabId,focusSuccess);
                };

                var focusSuccess = function focusSuccess(result) {
                        console.log('openSuccess:',result);

                        // detect if the consoleCardActions layout name has changed such that a new
                        // layout will be used in the ConsoleCards (if not user has to close the account
                        // and select the same account again in order for ConsoleCards to reflect change
                        // of layout name being used)
                        // var originalLayoutName = localStorage.getItem('consoleCardsLayoutName');
                        // var url = $scope.consoleCardsAction.url;
                        // var consoleCardsActionLayoutParams = url.substring(url.indexOf('&layout')).split('=');
                        // var consoleCardsActionLayoutName = consoleCardsActionLayoutParams[1];
                        if (!result.success || originalLayoutName !== consoleCardsActionLayoutName) {
                                // AccountConsoleCards subtab is NOT open. We need to open a new one and focus it OR layoutName changed
                                angular.forEach($scope.consoleCardsAction, function(action){
                                        console.log('Current Action', action);
                                        console.log('$rootScope.primaryTabUrl' , $rootScope.primaryTabUrl);
                                        
                                        $rootScope.action = action;
                                        $rootScope.primaryTabId = $scope.primaryTabId;
                                        
                                        var originalLayoutName = localStorage.getItem('consoleCardsLayoutName');
                                        var url = $rootScope.primaryTabUrl.contactId == undefined
                                            ? action.url
                                            : action.url.replace(/(contactId=).*$/i,"$1" + $rootScope.primaryTabUrl.contactId);
                                        //var consoleCardsActionLayoutParams = url.substring(url.indexOf('&layout')).split('=');
                                        //var consoleCardsActionLayoutName = consoleCardsActionLayoutParams[1];
                                        ///0014E00000OANl5?contactId=0034E00000NgkZi&productId=TestProduct
                                        var contactId = url.substring(url.indexOf('&contactId')).split('=');
                                        
                                         
                                        if (contactId[1].length < 15 && action['name'] == 'ConsoleCards') return;
                                        if (typeof($rootScope.primaryTabUrl.productId) == 'undefined' && action['name'] == 'ConsoleCardsProduct') return;
                                        
                                        url = url.replace(/(productId=)/i,"$1" + $rootScope.primaryTabUrl.productId);
                                        if (typeof($rootScope.primaryTabUrl.productId) !== 'undefined' && action['name'] === 'ConsoleCardsProduct'){
                                            url = url.replace(/(layout=)/i,"$1" + $rootScope.primaryTabUrl.layout);
                                        }
                                        console.log('URL', contactId);
                                        var tabLabel = action['displayName'];
                                        var subTabName = action['name'];
                                        sforce.console.openSubtab($scope.primaryTabId, url, true, tabLabel, null, openSuccess, subTabName);
                                });
                                // var tabLabel = $scope.consoleCardsAction['displayName'];
                                // var subTabName = $scope.consoleCardsAction['name'];
                                // sforce.console.openSubtab($scope.primaryTabId, url, true, tabLabel, null, openSuccess, subTabName);
                        }
                };

                var showTabId = function showTabId(result) {
                
                        console.log('Use VLOCITY Action');
                        //Display the subtab IDs
                        var subtabId = localStorage.getItem('subtabId');
                        if(result.ids.indexOf(subtabId) > -1){
                                // console.error('found the tab ');
                        } else {
                                // console.error('didnt find it, open it');
                                sforce.console.getTabLink(sforce.console.TabLink.TAB_ONLY, result.Id, showURL);
                        }
                };
                

               function urlToJSON(url) {
                  var query = url.replace(/^(.*)\?(.*)$/,"$2");
                  var result = {};
                  query.split("&").forEach(function(part) {
                    var item = part.split("=");
                    result[item[0]] = decodeURIComponent(item[1]);
                  });
                  return result;
                }
               
               var showURL = function showURL(result) {
                    var uri_dec = urlToJSON(decodeURIComponent(result.tabLink));
                    var actionParams = urlToJSON(decodeURIComponent($scope.consoleCardsAction[0].url));
                    //$scope.primaryTabUrl = uri_dec;
                    $rootScope.primaryTabUrl = uri_dec;
                    console.log('$scope.consoleCardsAction', actionParams);
                    $('#startLayout').append($compile('<vloc-layout layout-name="' + actionParams.layoutSidebar + '" session-id="{{session-id}}" layout-id="{{layoutId}}"/>')($scope));
                    var subTabName = $scope.consoleCardsAction['name'];
                    sforce.console.focusSubtabByNameAndPrimaryTabId(subTabName, $scope.primaryTabId,focusSuccess);
                }


                var openSuccess = function openSuccess(result) {
                        // console.error('opening subtab');
                        if(result.success){
                                var subtabId = localStorage.getItem('subtabId');
                                if(subtabId != result.Id){
                                        localStorage.setItem('subtabId',result.id);
                                        sforce.console.focusSubtabById(result.id);
                                }
                        }
                };

                // this will prevent the sidebar in loading itself twice, reducing api calls by 50%
                var eventHandler = function eventHandler(result) {
                    // just do nothing so I do not refresh :)
                };
                sforce.console.onEnclosingTabRefresh(eventHandler);

        }]);

        sideBarModule.controller('viaConsoleRightSidebar',
                                ['$scope', '$rootScope', '$timeout', function($scope, $rootScope, $timeout) {

            function initProfiler() {
                    if (!$Lightning) {
                        $timeout(initProfiler, 2000);
                    }
                    if ($Lightning) {
                            var nsPrefix = localStorage.getItem('nsPrefixDotNotation')
                            var lightningNsPrefix = nsPrefix.substring(0, nsPrefix.length - 1) + ':';
                            var ltngOutVFComponentName = lightningNsPrefix + "ltngOutVF";
                            var profileTopLevelContainerViewComponentName = lightningNsPrefix + "profileTopLevelContainerView";

                            $Lightning.use(ltngOutVFComponentName, function() {
                                $Lightning.createComponent(profileTopLevelContainerViewComponentName,
                                    { entityId : $rootScope.accountId},
                                    "lightning-profiler",
                                    function(cmp) {
                                    });
                            });

                    }
            }

            initProfiler();

        }]);

</script>
</html>
</apex:page>